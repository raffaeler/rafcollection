// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Vevy.Collections;
namespace TestV2RafCollection
{
	/// <summary>
	///This is a test class for Vevy.Collections.SimpleParser.BooleanExpression and is intended
	///to contain all Vevy.Collections.SimpleParser.BooleanExpression Unit Tests
	///</summary>
	[TestClass()]
	public class BooleanExpressionTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for BooleanExpression (BooleanOperand, BooleanOperatorType, BooleanOperand)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ConstructorTest()
		{
			SimpleParser.BooleanOperand Left = null; // TODO: Initialize to an appropriate value

			TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanOperatorTypeAccessor Operator = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand Right = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor.CreatePrivate(Left, Operator, Right);

			// TODO: Implement code to verify target
			Assert.Inconclusive("TODO: Implement code to verify target");
		}

		/// <summary>
		///A test for BooleanExpression (BooleanOperand, string, BooleanOperand)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ConstructorTest1()
		{
			SimpleParser.BooleanOperand Left = null; // TODO: Initialize to an appropriate value

			string Operator = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand Right = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor.CreatePrivate(Left, Operator, Right);

			// TODO: Implement code to verify target
			Assert.Inconclusive("TODO: Implement code to verify target");
		}

		/// <summary>
		///A test for BooleanExpression (string, BooleanOperand)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ConstructorTest2()
		{
			string Left = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand Right = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor.CreatePrivate(Left, Right);

			// TODO: Implement code to verify target
			Assert.Inconclusive("TODO: Implement code to verify target");
		}

		/// <summary>
		///A test for BooleanOperator
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void BooleanOperatorTest()
		{
			SimpleParser.BooleanOperand Left = null; // TODO: Initialize to an appropriate value

			string Operator = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand Right = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor.CreatePrivate(Left, Operator, Right);

			TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanOperatorTypeAccessor val = null; // TODO: Assign to an appropriate value for the property

			TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor(target);

			accessor.BooleanOperator = val;


			Assert.AreEqual(val, accessor.BooleanOperator, "Vevy.Collections.SimpleParser.BooleanExpression.BooleanOperator was not set corre" +
					"ctly.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for Eval (object)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void EvalTest()
		{
			SimpleParser.BooleanOperand Left = null; // TODO: Initialize to an appropriate value

			string Operator = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand Right = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor.CreatePrivate(Left, Operator, Right);

			TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor(target);

			object obj = null; // TODO: Initialize to an appropriate value

			bool expected = false;
			bool actual;

			actual = accessor.Eval(obj);

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.BooleanExpression.Eval did not return the expected " +
					"value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for GetBooleanOperator (string)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void GetBooleanOperatorTest()
		{
			string OperatorValue = null; // TODO: Initialize to an appropriate value

			TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanOperatorTypeAccessor expected = null;
			TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanOperatorTypeAccessor actual;

			actual = TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor.GetBooleanOperator(OperatorValue);

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.BooleanExpression.GetBooleanOperator did not return" +
					" the expected value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for Left
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void LeftTest()
		{
			SimpleParser.BooleanOperand Left = null; // TODO: Initialize to an appropriate value

			string Operator = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand Right = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor.CreatePrivate(Left, Operator, Right);

			SimpleParser.BooleanOperand val = null; // TODO: Assign to an appropriate value for the property

			TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor(target);

			accessor.Left = val;


			Assert.AreEqual(val, accessor.Left, "Vevy.Collections.SimpleParser.BooleanExpression.Left was not set correctly.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for Right
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void RightTest()
		{
			SimpleParser.BooleanOperand Left = null; // TODO: Initialize to an appropriate value

			string Operator = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand Right = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor.CreatePrivate(Left, Operator, Right);

			SimpleParser.BooleanOperand val = null; // TODO: Assign to an appropriate value for the property

			TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor(target);

			accessor.Right = val;


			Assert.AreEqual(val, accessor.Right, "Vevy.Collections.SimpleParser.BooleanExpression.Right was not set correctly.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for ToString ()
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ToStringTest()
		{
			SimpleParser.BooleanOperand Left = null; // TODO: Initialize to an appropriate value

			string Operator = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand Right = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor.CreatePrivate(Left, Operator, Right);

			TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_BooleanExpressionAccessor(target);

			string expected = null;
			string actual;

			actual = accessor.ToString();

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.BooleanExpression.ToString did not return the expec" +
					"ted value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

	}
	/// <summary>
	///This is a test class for Vevy.Collections.SimpleParser.BooleanOperand and is intended
	///to contain all Vevy.Collections.SimpleParser.BooleanOperand Unit Tests
	///</summary>
	[TestClass()]
	public class BooleanOperandTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for Create (string)
		///</summary>
		[TestMethod()]
		public void CreateTest()
		{
			string ExpressionToEvaluate = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand expected = null;
			SimpleParser.BooleanOperand actual;

			actual = Vevy.Collections.SimpleParser.BooleanOperand.Create(ExpressionToEvaluate);

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.BooleanOperand.Create did not return the expected v" +
					"alue.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for IsSimple (string)
		///</summary>
		[TestMethod()]
		public void IsSimpleTest()
		{
			string ExpressionToEvaluate = null; // TODO: Initialize to an appropriate value

			bool expected = false;
			bool actual;

			actual = Vevy.Collections.SimpleParser.BooleanOperand.IsSimple(ExpressionToEvaluate);

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.BooleanOperand.IsSimple did not return the expected" +
					" value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

	}
	/// <summary>
	///This is a test class for Vevy.Collections.SimpleParser.ElementarExpressionString and is intended
	///to contain all Vevy.Collections.SimpleParser.ElementarExpressionString Unit Tests
	///</summary>
	[TestClass()]
	public class ElementarExpressionStringTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for Append (char)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void AppendTest()
		{
			object target = TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor.CreatePrivate();

			TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor(target);

			char c = '\0'; // TODO: Initialize to an appropriate value

			accessor.Append(c);

			Assert.Inconclusive("A method that does not return a value cannot be verified.");
		}

		/// <summary>
		///A test for Append (string)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void AppendTest1()
		{
			object target = TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor.CreatePrivate();

			TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor(target);

			string s = null; // TODO: Initialize to an appropriate value

			accessor.Append(s);

			Assert.Inconclusive("A method that does not return a value cannot be verified.");
		}

		/// <summary>
		///A test for ElementarExpressionString ()
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ConstructorTest()
		{
			object target = TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor.CreatePrivate();

			// TODO: Implement code to verify target
			Assert.Inconclusive("TODO: Implement code to verify target");
		}

		/// <summary>
		///A test for ElementarExpressionString (string)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ConstructorTest1()
		{
			string Expression = null; // TODO: Initialize to an appropriate value

			object target = TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor.CreatePrivate(Expression);

			// TODO: Implement code to verify target
			Assert.Inconclusive("TODO: Implement code to verify target");
		}

		/// <summary>
		///A test for Expression
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ExpressionTest()
		{
			object target = TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor.CreatePrivate();

			string val = null; // TODO: Assign to an appropriate value for the property

			TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor(target);

			accessor.Expression = val;


			Assert.AreEqual(val, accessor.Expression, "Vevy.Collections.SimpleParser.ElementarExpressionString.Expression was not set co" +
					"rrectly.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for ToString ()
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ToStringTest()
		{
			object target = TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor.CreatePrivate();

			TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_ElementarExpressionStringAccessor(target);

			string expected = null;
			string actual;

			actual = accessor.ToString();

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.ElementarExpressionString.ToString did not return t" +
					"he expected value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

	}
	/// <summary>
	///This is a test class for Vevy.Collections.SimpleParser.SimpleExpression and is intended
	///to contain all Vevy.Collections.SimpleParser.SimpleExpression Unit Tests
	///</summary>
	[TestClass()]
	public class SimpleExpressionTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for Eval (object)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void EvalTest()
		{
			string Property = null; // TODO: Initialize to an appropriate value

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleOperatorTypeAccessor Operator = null; // TODO: Initialize to an appropriate value

			object Value = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor.CreatePrivate(Property, Operator, Value);

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor(target);

			object obj = null; // TODO: Initialize to an appropriate value

			bool expected = false;
			bool actual;

			actual = accessor.Eval(obj);

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.SimpleExpression.Eval did not return the expected v" +
					"alue.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for GetExpressionOperator (string)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void GetExpressionOperatorTest()
		{
			string str = null; // TODO: Initialize to an appropriate value

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleOperatorTypeAccessor expected = null;
			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleOperatorTypeAccessor actual;

			actual = TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor.GetExpressionOperator(str);

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.SimpleExpression.GetExpressionOperator did not retu" +
					"rn the expected value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for Operator
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void OperatorTest()
		{
			string Property = null; // TODO: Initialize to an appropriate value

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleOperatorTypeAccessor Operator = null; // TODO: Initialize to an appropriate value

			object Value = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor.CreatePrivate(Property, Operator, Value);

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleOperatorTypeAccessor val = null; // TODO: Assign to an appropriate value for the property

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor(target);

			accessor.Operator = val;


			Assert.AreEqual(val, accessor.Operator, "Vevy.Collections.SimpleParser.SimpleExpression.Operator was not set correctly.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for Property
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void PropertyTest()
		{
			string Property = null; // TODO: Initialize to an appropriate value

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleOperatorTypeAccessor Operator = null; // TODO: Initialize to an appropriate value

			object Value = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor.CreatePrivate(Property, Operator, Value);

			string val = null; // TODO: Assign to an appropriate value for the property

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor(target);

			accessor.Property = val;


			Assert.AreEqual(val, accessor.Property, "Vevy.Collections.SimpleParser.SimpleExpression.Property was not set correctly.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for SimpleExpression (string, SimpleOperatorType, object)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ConstructorTest()
		{
			string Property = null; // TODO: Initialize to an appropriate value

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleOperatorTypeAccessor Operator = null; // TODO: Initialize to an appropriate value

			object Value = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor.CreatePrivate(Property, Operator, Value);

			// TODO: Implement code to verify target
			Assert.Inconclusive("TODO: Implement code to verify target");
		}

		/// <summary>
		///A test for ToString ()
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ToStringTest()
		{
			string Property = null; // TODO: Initialize to an appropriate value

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleOperatorTypeAccessor Operator = null; // TODO: Initialize to an appropriate value

			object Value = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor.CreatePrivate(Property, Operator, Value);

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor(target);

			string expected = null;
			string actual;

			actual = accessor.ToString();

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.SimpleExpression.ToString did not return the expect" +
					"ed value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for Value
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ValueTest()
		{
			string Property = null; // TODO: Initialize to an appropriate value

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleOperatorTypeAccessor Operator = null; // TODO: Initialize to an appropriate value

			object Value = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand target = TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor.CreatePrivate(Property, Operator, Value);

			object val = null; // TODO: Assign to an appropriate value for the property

			TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParser_SimpleExpressionAccessor(target);

			accessor.Value = val;


			Assert.AreEqual(val, accessor.Value, "Vevy.Collections.SimpleParser.SimpleExpression.Value was not set correctly.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

	}
	/// <summary>
	///This is a test class for Vevy.Collections.SimpleParser and is intended
	///to contain all Vevy.Collections.SimpleParser Unit Tests
	///</summary>
	[TestClass()]
	public class SimpleParserTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for Build (BooleanOperand, string)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void BuildTest()
		{
			SimpleParser target = new SimpleParser();

			TestV2RafCollection.Vevy_Collections_SimpleParserAccessor accessor = new TestV2RafCollection.Vevy_Collections_SimpleParserAccessor(target);

			SimpleParser.BooleanOperand ParsedExp = null; // TODO: Initialize to an appropriate value

			string StringExp = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand expected = null;
			SimpleParser.BooleanOperand actual;

			actual = accessor.Build(ParsedExp, StringExp);

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.Build did not return the expected value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for Parse (string)
		///</summary>
		[TestMethod()]
		public void ParseTest()
		{
			SimpleParser target = new SimpleParser();

			string str = null; // TODO: Initialize to an appropriate value

			SimpleParser.BooleanOperand expected = null;
			SimpleParser.BooleanOperand actual;

			actual = target.Parse(str);

			Assert.AreEqual(expected, actual, "Vevy.Collections.SimpleParser.Parse did not return the expected value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

	}


}
