// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Vevy.Collections;
using System.ComponentModel;
using System.Runtime.Serialization;
namespace TestV2RafCollection
{
	/// <summary>
	///This is a test class for Vevy.Collections.RafCollection&lt;T&gt; and is intended
	///to contain all Vevy.Collections.RafCollection&lt;T&gt; Unit Tests
	///</summary>
	[TestClass()]
	public class RafCollectionTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for ~RafCollection ()
		///</summary>
		[TestMethod()]
		public void FinalizerTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.RafCollection<T>.~RafCollection: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.RafCollection<T>.~RafCollection: Private accessors cannot be created for" +
					" generic types");
		}

		/// <summary>
		///A test for AcceptChanges ()
		///</summary>
		[TestMethod()]
		public void AcceptChangesTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// target.AcceptChanges();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for AcceptChanges (Box&lt;T&gt;)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void AcceptChangesTest1()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Box<T> Elem = null; // TODO: Initialize to an appropriate value
			// 
			// accessor.AcceptChanges(Elem);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Add (Box&lt;T&gt;)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void AddTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Box<T> Element = null; // TODO: Initialize to an appropriate value
			// 
			// int expected = 0;
			// int actual;
			// 
			// actual = accessor.Add(Element);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.Add did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Add (T)
		///</summary>
		[TestMethod()]
		public void AddTest1()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T Item = 0; // TODO: Initialize to an appropriate value
			// 
			// int expected = 0;
			// int actual;
			// 
			// actual = target.Add(Item);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.Add did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Add (T, ObjectStatusType)
		///</summary>
		[TestMethod()]
		public void AddTest2()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T Item = 0; // TODO: Initialize to an appropriate value
			// 
			// ObjectStatusType StatusType = ObjectStatusType.Normal; // TODO: Initialize to an appropriate value
			// 
			// int expected = 0;
			// int actual;
			// 
			// actual = target.Add(Item, StatusType);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.Add did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Add (T, RafCollection&lt;T&gt;)
		///</summary>
		[TestMethod()]
		public void AddTest3()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T Item = 0; // TODO: Initialize to an appropriate value
			// 
			// Vevy.Collections.RafCollection<T> SourceList = null; // TODO: Initialize to an appropriate value
			// 
			// int expected = 0;
			// int actual;
			// 
			// actual = target.Add(Item, SourceList);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.Add did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for AddIndex (PropertyDescriptor)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void AddIndexTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// PropertyDescriptor property = null; // TODO: Initialize to an appropriate value
			// 
			// accessor.AddIndex(property);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for AddNew ()
		///</summary>
		[TestMethod()]
		public void AddNewTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T expected = 0;
			// T actual;
			// 
			// actual = target.AddNew();
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.AddNew did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for AllowEdit
		///</summary>
		[TestMethod()]
		public void AllowEditTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// target.AllowEdit = val;
			// 
			// 
			// Assert.AreEqual(val, target.AllowEdit, "Vevy.Collections.RafCollection<T>.AllowEdit was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for AllowNew
		///</summary>
		[TestMethod()]
		public void AllowNewTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// target.AllowNew = val;
			// 
			// 
			// Assert.AreEqual(val, target.AllowNew, "Vevy.Collections.RafCollection<T>.AllowNew was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for AllowRemove
		///</summary>
		[TestMethod()]
		public void AllowRemoveTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// target.AllowRemove = val;
			// 
			// 
			// Assert.AreEqual(val, target.AllowRemove, "Vevy.Collections.RafCollection<T>.AllowRemove was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for ApplySort (ListSortDescriptionCollection)
		///</summary>
		[TestMethod()]
		public void ApplySortTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// ListSortDescriptionCollection sorts = null; // TODO: Initialize to an appropriate value
			// 
			// target.ApplySort(sorts);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CalculateInvisibleCount ()
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void CalculateInvisibleCountTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// accessor.CalculateInvisibleCount();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CalculateRealIndex (int)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void CalculateRealIndexTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// int index = 0; // TODO: Initialize to an appropriate value
			// 
			// int expected = 0;
			// int actual;
			// 
			// actual = accessor.CalculateRealIndex(index);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.CalculateRealIndex did not return the expected " +
			//        "value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CancelNew (int)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void CancelNewTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// int itemIndex = 0; // TODO: Initialize to an appropriate value
			// 
			// accessor.CancelNew(itemIndex);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Clear ()
		///</summary>
		[TestMethod()]
		public void ClearTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// target.Clear();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CollectedItem_PropertyChanged (object, PropertyChangedEventArgs)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void CollectedItem_PropertyChangedTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// object sender = null; // TODO: Initialize to an appropriate value
			// 
			// PropertyChangedEventArgs e = null; // TODO: Initialize to an appropriate value
			// 
			// accessor.CollectedItem_PropertyChanged(sender, e);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Container
		///</summary>
		[TestMethod()]
		public void ContainerTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// IContainer val = null; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.Container, "Vevy.Collections.RafCollection<T>.Container was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Contains (T)
		///</summary>
		[TestMethod()]
		public void ContainsTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T item = 0; // TODO: Initialize to an appropriate value
			// 
			// bool expected = false;
			// bool actual;
			// 
			// actual = target.Contains(item);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.Contains did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CopyTo (T[], int)
		///</summary>
		[TestMethod()]
		public void CopyToTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T[] array = null; // TODO: Initialize to an appropriate value
			// 
			// int arrayIndex = 0; // TODO: Initialize to an appropriate value
			// 
			// target.CopyTo(array, arrayIndex);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Count
		///</summary>
		[TestMethod()]
		public void CountTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// int val = 0; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.Count, "Vevy.Collections.RafCollection<T>.Count was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CreateArray ()
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void CreateArrayTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// accessor.CreateArray();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CreateT ()
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void CreateTTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// T expected = 0;
			// T actual;
			// 
			// actual = accessor.CreateT();
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.CreateT did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for DesignMode
		///</summary>
		[TestMethod()]
		public void DesignModeTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.DesignMode, "Vevy.Collections.RafCollection<T>.DesignMode was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Dispose ()
		///</summary>
		[TestMethod()]
		public void DisposeTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// target.Dispose();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Dispose (bool)
		///</summary>
		[TestMethod()]
		public void DisposeTest1()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.RafCollection<T>.Dispose: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.RafCollection<T>.Dispose: Private accessors cannot be created for generi" +
					"c types");
		}

		/// <summary>
		///A test for EndNew (int)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void EndNewTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// int itemIndex = 0; // TODO: Initialize to an appropriate value
			// 
			// accessor.EndNew(itemIndex);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Events
		///</summary>
		[TestMethod()]
		public void EventsTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.RafCollection<T>.Events: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.RafCollection<T>.Events: Private accessors cannot be created for generic" +
					" types");
		}

		/// <summary>
		///A test for Filter
		///</summary>
		[TestMethod()]
		public void FilterTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// string val = null; // TODO: Assign to an appropriate value for the property
			// 
			// target.Filter = val;
			// 
			// 
			// Assert.AreEqual(val, target.Filter, "Vevy.Collections.RafCollection<T>.Filter was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Find (PropertyDescriptor, object)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void FindTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// PropertyDescriptor property = null; // TODO: Initialize to an appropriate value
			// 
			// object key = null; // TODO: Initialize to an appropriate value
			// 
			// int expected = 0;
			// int actual;
			// 
			// actual = accessor.Find(property, key);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.Find did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Find (string, object)
		///</summary>
		[TestMethod()]
		public void FindTest1()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// string PropertyName = null; // TODO: Initialize to an appropriate value
			// 
			// object Key = null; // TODO: Initialize to an appropriate value
			// 
			// int expected = 0;
			// int actual;
			// 
			// actual = target.Find(PropertyName, Key);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.Find did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for GetEnumerator ()
		///</summary>
		[TestMethod()]
		public void GetEnumeratorTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// System.Collections.Generic.IEnumerator<T> expected = null;
			// System.Collections.Generic.IEnumerator<T> actual;
			// 
			// actual = target.GetEnumerator();
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.GetEnumerator did not return the expected value" +
			//        ".");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for GetExternalStorage (T)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void GetExternalStorageTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// T Item = 0; // TODO: Initialize to an appropriate value
			// 
			// Vevy.Collections.Box<T> expected = null;
			// Vevy.Collections.Box<T> actual;
			// 
			// actual = accessor.GetExternalStorage(Item);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.GetExternalStorage did not return the expected " +
			//        "value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for GetInternalStorage (T)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void GetInternalStorageTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// T Item = 0; // TODO: Initialize to an appropriate value
			// 
			// Vevy.Collections.Storage<T> expected = null;
			// Vevy.Collections.Storage<T> actual;
			// 
			// actual = accessor.GetInternalStorage(Item);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.GetInternalStorage did not return the expected " +
			//        "value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for GetObjectStatus (T)
		///</summary>
		[TestMethod()]
		public void GetObjectStatusTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T Item = 0; // TODO: Initialize to an appropriate value
			// 
			// ObjectStatusType expected = ObjectStatusType.Normal;
			// ObjectStatusType actual;
			// 
			// actual = target.GetObjectStatus(Item);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.GetObjectStatus did not return the expected val" +
			//        "ue.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for GetPropertyType (PropertyDescriptor[])
		///</summary>
		[TestMethod()]
		public void GetPropertyTypeTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.RafCollection<T>.GetPropertyType: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.RafCollection<T>.GetPropertyType: Private accessors cannot be created fo" +
					"r generic types");
		}

		/// <summary>
		///A test for GetService (Type)
		///</summary>
		[TestMethod()]
		public void GetServiceTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// Type service = null; // TODO: Initialize to an appropriate value
			// 
			// object expected = null;
			// object actual;
			// 
			// actual = target.GetService(service);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.GetService did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for GetValuesForProperties (string, T, string)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void GetValuesForPropertiesTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// string Properties = null; // TODO: Initialize to an appropriate value
			// 
			// T obj = 0; // TODO: Initialize to an appropriate value
			// 
			// string Postfix = null; // TODO: Initialize to an appropriate value
			// 
			// string expected = null;
			// string actual;
			// 
			// actual = accessor.GetValuesForProperties(Properties, obj, Postfix);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.GetValuesForProperties did not return the expec" +
			//        "ted value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for GrowArray ()
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void GrowArrayTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// accessor.GrowArray();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for HasChanges
		///</summary>
		[TestMethod()]
		public void HasChangesTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.HasChanges, "Vevy.Collections.RafCollection<T>.HasChanges was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for HasChangesElement (Storage&lt;T&gt;)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void HasChangesElementTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Storage<T> Item = null; // TODO: Initialize to an appropriate value
			// 
			// bool expected = false;
			// bool actual;
			// 
			// actual = accessor.HasChangesElement(Item);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.HasChangesElement did not return the expected v" +
			//        "alue.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for IndexOf (T)
		///</summary>
		[TestMethod()]
		public void IndexOfTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T item = 0; // TODO: Initialize to an appropriate value
			// 
			// int expected = 0;
			// int actual;
			// 
			// actual = target.IndexOf(item);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.IndexOf did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Insert (int, T)
		///</summary>
		[TestMethod()]
		public void InsertTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// int index = 0; // TODO: Initialize to an appropriate value
			// 
			// T value = 0; // TODO: Initialize to an appropriate value
			// 
			// target.Insert(index, value);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Insert (int, T, ObjectStatusType)
		///</summary>
		[TestMethod()]
		public void InsertTest1()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// int index = 0; // TODO: Initialize to an appropriate value
			// 
			// T value = 0; // TODO: Initialize to an appropriate value
			// 
			// ObjectStatusType StatusType = ObjectStatusType.Normal; // TODO: Initialize to an appropriate value
			// 
			// target.Insert(index, value, StatusType);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for IsSorted
		///</summary>
		[TestMethod()]
		public void IsSortedTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.IsSorted, "Vevy.Collections.RafCollection<T>.IsSorted was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for IsVisible (Box&lt;T&gt;)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void IsVisibleTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Box<T> Item = null; // TODO: Initialize to an appropriate value
			// 
			// bool expected = false;
			// bool actual;
			// 
			// actual = accessor.IsVisible(Item);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.IsVisible did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for IsVisible (Box&lt;T&gt;, ObjectStateFilter)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void IsVisibleTest1()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Box<T> Item = null; // TODO: Initialize to an appropriate value
			// 
			// ObjectStateFilter Filter = ObjectStateFilter.Normal; // TODO: Initialize to an appropriate value
			// 
			// bool expected = false;
			// bool actual;
			// 
			// actual = accessor.IsVisible(Item, Filter);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.IsVisible did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for ItemTypeHasDefaultConstructor
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ItemTypeHasDefaultConstructorTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// void accessor = new void(target);
			// 
			// 
			// Assert.AreEqual(val, accessor.ItemTypeHasDefaultConstructor, "Vevy.Collections.RafCollection<T>.ItemTypeHasDefaultConstructor was not set corre" +
			//        "ctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for MapStateSymbol (ObjectStatusType)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void MapStateSymbolTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// ObjectStatusType StatusType = ObjectStatusType.Normal; // TODO: Initialize to an appropriate value
			// 
			// string expected = null;
			// string actual;
			// 
			// actual = accessor.MapStateSymbol(StatusType);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.MapStateSymbol did not return the expected valu" +
			//        "e.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for NewArraySize
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void NewArraySizeTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// int val = 0; // TODO: Assign to an appropriate value for the property
			// 
			// void accessor = new void(target);
			// 
			// 
			// Assert.AreEqual(val, accessor.NewArraySize, "Vevy.Collections.RafCollection<T>.NewArraySize was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for OnAfterAdd (Storage&lt;T&gt;)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void OnAfterAddTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Storage<T> Item = null; // TODO: Initialize to an appropriate value
			// 
			// accessor.OnAfterAdd(Item);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for OnAfterRemove (Storage&lt;T&gt;)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void OnAfterRemoveTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Storage<T> Item = null; // TODO: Initialize to an appropriate value
			// 
			// accessor.OnAfterRemove(Item);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for OnBeforeAdd (Storage&lt;T&gt;)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void OnBeforeAddTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Storage<T> Item = null; // TODO: Initialize to an appropriate value
			// 
			// accessor.OnBeforeAdd(Item);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for OnBeforeRemove (Storage&lt;T&gt;)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void OnBeforeRemoveTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Storage<T> Item = null; // TODO: Initialize to an appropriate value
			// 
			// accessor.OnBeforeRemove(Item);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for OnBeforeSerialize (StreamingContext)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void OnBeforeSerializeTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// StreamingContext context = new StreamingContext(); // TODO: Initialize to an appropriate value
			// 
			// accessor.OnBeforeSerialize(context);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for OnDeserialized (StreamingContext)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void OnDeserializedTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// StreamingContext context = new StreamingContext(); // TODO: Initialize to an appropriate value
			// 
			// accessor.OnDeserialized(context);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for OnListChanged (ListChangedEventArgs)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void OnListChangedTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// ListChangedEventArgs e = null; // TODO: Initialize to an appropriate value
			// 
			// accessor.OnListChanged(e);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for ParseSortingProps (string)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void ParseSortingPropsTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// string SortingProps = null; // TODO: Initialize to an appropriate value
			// 
			// ListSortDescriptionCollection expected = null;
			// ListSortDescriptionCollection actual;
			// 
			// actual = accessor.ParseSortingProps(SortingProps);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.ParseSortingProps did not return the expected v" +
			//        "alue.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for RafCollection ()
		///</summary>
		[TestMethod()]
		public void ConstructorTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// // TODO: Implement code to verify target
			// Assert.Inconclusive("TODO: Implement code to verify target");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for RaisesItemChangedEvents
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void RaisesItemChangedEventsTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// void accessor = new void(target);
			// 
			// 
			// Assert.AreEqual(val, accessor.RaisesItemChangedEvents, "Vevy.Collections.RafCollection<T>.RaisesItemChangedEvents was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for RealIndexOf (T)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void RealIndexOfTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// T item = 0; // TODO: Initialize to an appropriate value
			// 
			// int expected = 0;
			// int actual;
			// 
			// actual = accessor.RealIndexOf(item);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.RealIndexOf did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for RecalcFilter (bool)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void RecalcFilterTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// bool bForce = false; // TODO: Initialize to an appropriate value
			// 
			// accessor.RecalcFilter(bForce);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for RejectChanges ()
		///</summary>
		[TestMethod()]
		public void RejectChangesTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// target.RejectChanges();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for RejectChanges (Box&lt;T&gt;)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void RejectChangesTest1()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Box<T> Elem = null; // TODO: Initialize to an appropriate value
			// 
			// bool expected = false;
			// bool actual;
			// 
			// actual = accessor.RejectChanges(Elem);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.RejectChanges did not return the expected value" +
			//        ".");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Remove (T)
		///</summary>
		[TestMethod()]
		public void RemoveTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T item = 0; // TODO: Initialize to an appropriate value
			// 
			// bool expected = false;
			// bool actual;
			// 
			// actual = target.Remove(item);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.Remove did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for RemoveAt (int)
		///</summary>
		[TestMethod()]
		public void RemoveAtTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// int index = 0; // TODO: Initialize to an appropriate value
			// 
			// target.RemoveAt(index);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for RemoveAtFinal (int)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void RemoveAtFinalTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// int RealIndex = 0; // TODO: Initialize to an appropriate value
			// 
			// accessor.RemoveAtFinal(RealIndex);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for RemoveIndex (PropertyDescriptor)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void RemoveIndexTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// PropertyDescriptor property = null; // TODO: Initialize to an appropriate value
			// 
			// accessor.RemoveIndex(property);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for RemoveSort ()
		///</summary>
		[TestMethod()]
		public void RemoveSortTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// target.RemoveSort();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Replace (T, T)
		///</summary>
		[TestMethod()]
		public void ReplaceTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T ItemToReplace = 0; // TODO: Initialize to an appropriate value
			// 
			// T NewItem = 0; // TODO: Initialize to an appropriate value
			// 
			// target.Replace(ItemToReplace, NewItem);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Reverse ()
		///</summary>
		[TestMethod()]
		public void ReverseTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// target.Reverse();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SetCustomFilter (CustomChoiceDelegate&lt;T&gt;)
		///</summary>
		[TestMethod()]
		public void SetCustomFilterTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// Vevy.Collections.CustomChoiceDelegate<T> CustomChoice = null; // TODO: Initialize to an appropriate value
			// 
			// target.SetCustomFilter(CustomChoice);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SetObjectStatus (Box&lt;T&gt;, ObjectStatusType)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void SetObjectStatusTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// void accessor = new void(target);
			// 
			// Vevy.Collections.Box<T> Item = null; // TODO: Initialize to an appropriate value
			// 
			// ObjectStatusType StatusType = ObjectStatusType.Normal; // TODO: Initialize to an appropriate value
			// 
			// accessor.SetObjectStatus(Item, StatusType);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SetObjectStatus (T, ObjectStatusType)
		///</summary>
		[TestMethod()]
		public void SetObjectStatusTest1()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T Item = 0; // TODO: Initialize to an appropriate value
			// 
			// ObjectStatusType StatusType = ObjectStatusType.Normal; // TODO: Initialize to an appropriate value
			// 
			// target.SetObjectStatus(Item, StatusType);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Site
		///</summary>
		[TestMethod()]
		public void SiteTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// ISite val = null; // TODO: Assign to an appropriate value for the property
			// 
			// target.Site = val;
			// 
			// 
			// Assert.AreEqual(val, target.Site, "Vevy.Collections.RafCollection<T>.Site was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Sort ()
		///</summary>
		[TestMethod()]
		public void SortTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// target.Sort();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Sort (IComparer&lt;T&gt;)
		///</summary>
		[TestMethod()]
		public void SortTest1()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// System.Collections.Generic.IComparer<T> comparer = null; // TODO: Initialize to an appropriate value
			// 
			// target.Sort(comparer);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Sort (string)
		///</summary>
		[TestMethod()]
		public void SortTest2()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// string SortString = null; // TODO: Initialize to an appropriate value
			// 
			// target.Sort(SortString);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SortDescriptions
		///</summary>
		[TestMethod()]
		public void SortDescriptionsTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// ListSortDescriptionCollection val = null; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.SortDescriptions, "Vevy.Collections.RafCollection<T>.SortDescriptions was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SortDirection
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void SortDirectionTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// ListSortDirection val = ListSortDirection.Ascending; // TODO: Assign to an appropriate value for the property
			// 
			// void accessor = new void(target);
			// 
			// 
			// Assert.AreEqual(val, accessor.SortDirection, "Vevy.Collections.RafCollection<T>.SortDirection was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SortProperty
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void SortPropertyTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// PropertyDescriptor val = null; // TODO: Assign to an appropriate value for the property
			// 
			// void accessor = new void(target);
			// 
			// 
			// Assert.AreEqual(val, accessor.SortProperty, "Vevy.Collections.RafCollection<T>.SortProperty was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for StateFilter
		///</summary>
		[TestMethod()]
		public void StateFilterTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// ObjectStateFilter val = ObjectStateFilter.Normal; // TODO: Assign to an appropriate value for the property
			// 
			// target.StateFilter = val;
			// 
			// 
			// Assert.AreEqual(val, target.StateFilter, "Vevy.Collections.RafCollection<T>.StateFilter was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SupportsChangeNotification
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void SupportsChangeNotificationTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// void accessor = new void(target);
			// 
			// 
			// Assert.AreEqual(val, accessor.SupportsChangeNotification, "Vevy.Collections.RafCollection<T>.SupportsChangeNotification was not set correctl" +
			//        "y.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SupportsSearching
		///</summary>
		[TestMethod()]
		public void SupportsSearchingTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.SupportsSearching, "Vevy.Collections.RafCollection<T>.SupportsSearching was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SupportsSorting
		///</summary>
		[TestMethod()]
		public void SupportsSortingTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.SupportsSorting, "Vevy.Collections.RafCollection<T>.SupportsSorting was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SyncRoot
		///</summary>
		[TestMethod()]
		public void SyncRootTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// object val = null; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.SyncRoot, "Vevy.Collections.RafCollection<T>.SyncRoot was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for this[int index]
		///</summary>
		[TestMethod()]
		public void ItemTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// T val = 0; // TODO: Assign to an appropriate value for the property
			// 
			// int index = 0; // TODO: Initialize to an appropriate value
			// 
			// target[index] = val;
			// 
			// 
			// Assert.AreEqual(val, target[index], "Vevy.Collections.RafCollection<T>.this was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for ToString ()
		///</summary>
		[TestMethod()]
		public void ToStringTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// string expected = null;
			// string actual;
			// 
			// actual = target.ToString();
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.ToString did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for ToString (bool)
		///</summary>
		[TestMethod()]
		public void ToStringTest1()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// bool DumpState = false; // TODO: Initialize to an appropriate value
			// 
			// string expected = null;
			// string actual;
			// 
			// actual = target.ToString(DumpState);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.ToString did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for ToString (string)
		///</summary>
		[TestMethod()]
		public void ToStringTest2()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// string Properties = null; // TODO: Initialize to an appropriate value
			// 
			// string expected = null;
			// string actual;
			// 
			// actual = target.ToString(Properties);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.ToString did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for ToString (string, bool)
		///</summary>
		[TestMethod()]
		public void ToStringTest3()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// string Properties = null; // TODO: Initialize to an appropriate value
			// 
			// bool DumpState = false; // TODO: Initialize to an appropriate value
			// 
			// string expected = null;
			// string actual;
			// 
			// actual = target.ToString(Properties, DumpState);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.ToString did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for ToString (string, bool, int)
		///</summary>
		[TestMethod()]
		public void ToStringTest4()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// string Properties = null; // TODO: Initialize to an appropriate value
			// 
			// bool DumpState = false; // TODO: Initialize to an appropriate value
			// 
			// int MaxObjects = 0; // TODO: Initialize to an appropriate value
			// 
			// string expected = null;
			// string actual;
			// 
			// actual = target.ToString(Properties, DumpState, MaxObjects);
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.RafCollection<T>.ToString did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for UnfilteredCount
		///</summary>
		[TestMethod()]
		public void UnfilteredCountTest()
		{
			// RafCollection<T> target = new RafCollection<T>();
			// 
			// int val = 0; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.UnfilteredCount, "Vevy.Collections.RafCollection<T>.UnfilteredCount was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

	}


}
