// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Vevy.Collections;
namespace TestV2RafCollection
{
	/// <summary>
	///This is a test class for Vevy.Collections.Storage&lt;T&gt; and is intended
	///to contain all Vevy.Collections.Storage&lt;T&gt; Unit Tests
	///</summary>
	[TestClass()]
	public class StorageTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for AcceptChanges ()
		///</summary>
		[TestMethod()]
		public void AcceptChangesTest()
		{
			// T Object = 0; // TODO: Initialize to an appropriate value
			// 
			// Storage<T> target = new Storage<T>(Object);
			// 
			// target.AcceptChanges();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CollectedObject
		///</summary>
		[TestMethod()]
		public void CollectedObjectTest()
		{
			// T Object = 0; // TODO: Initialize to an appropriate value
			// 
			// Storage<T> target = new Storage<T>(Object);
			// 
			// T val = 0; // TODO: Assign to an appropriate value for the property
			// 
			// target.CollectedObject = val;
			// 
			// 
			// Assert.AreEqual(val, target.CollectedObject, "Vevy.Collections.Storage<T>.CollectedObject was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CollectedObjectImplementICloneable
		///</summary>
		[TestMethod()]
		public void CollectedObjectImplementICloneableTest()
		{
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, Vevy.Collections.Storage<T>.CollectedObjectImplementICloneable, "Vevy.Collections.Storage<T>.CollectedObjectImplementICloneable was not set correc" +
			//        "tly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CollectedObjectImplementINotifyPropertyChanged
		///</summary>
		[TestMethod()]
		public void CollectedObjectImplementINotifyPropertyChangedTest()
		{
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, Vevy.Collections.Storage<T>.CollectedObjectImplementINotifyPropertyChanged, "Vevy.Collections.Storage<T>.CollectedObjectImplementINotifyPropertyChanged was no" +
			//        "t set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for CollectedObjectImplementINotifyPropertyChanging
		///</summary>
		[TestMethod()]
		public void CollectedObjectImplementINotifyPropertyChangingTest()
		{
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, Vevy.Collections.Storage<T>.CollectedObjectImplementINotifyPropertyChanging, "Vevy.Collections.Storage<T>.CollectedObjectImplementINotifyPropertyChanging was n" +
			//        "ot set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for IsChanged
		///</summary>
		[TestMethod()]
		public void IsChangedTest()
		{
			// T Object = 0; // TODO: Initialize to an appropriate value
			// 
			// Storage<T> target = new Storage<T>(Object);
			// 
			// bool val = false; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.IsChanged, "Vevy.Collections.Storage<T>.IsChanged was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Object_PropertyChanged (object, PropertyChangedEventArgs)
		///</summary>
		[TestMethod()]
		public void Object_PropertyChangedTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.Storage<T>.Object_PropertyChanged: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.Storage<T>.Object_PropertyChanged: Private accessors cannot be created f" +
					"or generic types");
		}

		/// <summary>
		///A test for OnPropertyChanged (object, PropertyChangedEventArgs)
		///</summary>
		[TestMethod()]
		public void OnPropertyChangedTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.Storage<T>.OnPropertyChanged: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.Storage<T>.OnPropertyChanged: Private accessors cannot be created for ge" +
					"neric types");
		}

		/// <summary>
		///A test for RejectChanges ()
		///</summary>
		[TestMethod()]
		public void RejectChangesTest()
		{
			// T Object = 0; // TODO: Initialize to an appropriate value
			// 
			// Storage<T> target = new Storage<T>(Object);
			// 
			// target.RejectChanges();
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SaveClone (bool)
		///</summary>
		[TestMethod()]
		public void SaveCloneTest()
		{
			// T Object = 0; // TODO: Initialize to an appropriate value
			// 
			// Storage<T> target = new Storage<T>(Object);
			// 
			// bool bForce = false; // TODO: Initialize to an appropriate value
			// 
			// target.SaveClone(bForce);
			// 
			// Assert.Inconclusive("A method that does not return a value cannot be verified.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Status
		///</summary>
		[TestMethod()]
		public void StatusTest()
		{
			// T Object = 0; // TODO: Initialize to an appropriate value
			// 
			// Storage<T> target = new Storage<T>(Object);
			// 
			// ObjectStatusType val = ObjectStatusType.Normal; // TODO: Assign to an appropriate value for the property
			// 
			// target.Status = val;
			// 
			// 
			// Assert.AreEqual(val, target.Status, "Vevy.Collections.Storage<T>.Status was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Storage (T)
		///</summary>
		[TestMethod()]
		public void ConstructorTest()
		{
			// T Object = 0; // TODO: Initialize to an appropriate value
			// 
			// Storage<T> target = new Storage<T>(Object);
			// 
			// // TODO: Implement code to verify target
			// Assert.Inconclusive("TODO: Implement code to verify target");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for Storage (T, ObjectStatusType)
		///</summary>
		[TestMethod()]
		public void ConstructorTest1()
		{
			// T Object = 0; // TODO: Initialize to an appropriate value
			// 
			// ObjectStatusType StatusType = ObjectStatusType.Normal; // TODO: Initialize to an appropriate value
			// 
			// Storage<T> target = new Storage<T>(Object, StatusType);
			// 
			// // TODO: Implement code to verify target
			// Assert.Inconclusive("TODO: Implement code to verify target");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for SubscribeEvents (T)
		///</summary>
		[TestMethod()]
		public void SubscribeEventsTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.Storage<T>.SubscribeEvents: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.Storage<T>.SubscribeEvents: Private accessors cannot be created for gene" +
					"ric types");
		}

		/// <summary>
		///A test for ToString ()
		///</summary>
		[TestMethod()]
		public void ToStringTest()
		{
			// T Object = 0; // TODO: Initialize to an appropriate value
			// 
			// Storage<T> target = new Storage<T>(Object);
			// 
			// string expected = null;
			// string actual;
			// 
			// actual = target.ToString();
			// 
			// Assert.AreEqual(expected, actual, "Vevy.Collections.Storage<T>.ToString did not return the expected value.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for UnsubscribeEvents (T)
		///</summary>
		[TestMethod()]
		public void UnsubscribeEventsTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.Storage<T>.UnsubscribeEvents: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.Storage<T>.UnsubscribeEvents: Private accessors cannot be created for ge" +
					"neric types");
		}

	}


}
