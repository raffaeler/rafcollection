// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace TestV2RafCollection
{
	/// <summary>
	///This is a test class for Vevy.Collections.CollectionUtilities and is intended
	///to contain all Vevy.Collections.CollectionUtilities Unit Tests
	///</summary>
	[TestClass()]
	public class CollectionUtilitiesTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for TypeImplementInterface (Type, string)
		///</summary>
		[DeploymentItem("RafCollection.dll")]
		[TestMethod()]
		public void TypeImplementInterfaceTest()
		{
			Type TypeToEvaluate = null; // TODO: Initialize to an appropriate value

			string InterfaceName = null; // TODO: Initialize to an appropriate value

			bool expected = false;
			bool actual;

			actual = TestV2RafCollection.Vevy_Collections_CollectionUtilitiesAccessor.TypeImplementInterface(TypeToEvaluate, InterfaceName);

			Assert.AreEqual(expected, actual, "Vevy.Collections.CollectionUtilities.TypeImplementInterface did not return the ex" +
					"pected value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

	}
	/// <summary>
	///This is a test class for Vevy.Collections.FilterSortCreator&lt;T&gt; and is intended
	///to contain all Vevy.Collections.FilterSortCreator&lt;T&gt; Unit Tests
	///</summary>
	[TestClass()]
	public class FilterSortCreatorTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for BuildAssembly ()
		///</summary>
		[TestMethod()]
		public void BuildAssemblyTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.FilterSortCreator<T>.BuildAssembly: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.FilterSortCreator<T>.BuildAssembly: Private accessors cannot be created " +
					"for generic types");
		}

		/// <summary>
		///A test for CustomChoice
		///</summary>
		[TestMethod()]
		public void CustomChoiceTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.FilterSortCreator<T>.CustomChoice: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.FilterSortCreator<T>.CustomChoice: Private accessors cannot be created f" +
					"or generic types");
		}

		/// <summary>
		///A test for FilterSortCreator (CustomChoiceDelegate&lt;T&gt;)
		///</summary>
		[TestMethod()]
		public void ConstructorTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.FilterSortCreator<T>.FilterSortCreator: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.FilterSortCreator<T>.FilterSortCreator: Private accessors cannot be crea" +
					"ted for generic types");
		}

		/// <summary>
		///A test for FilterSortCreator (string)
		///</summary>
		[TestMethod()]
		public void ConstructorTest1()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.FilterSortCreator<T>.FilterSortCreator: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.FilterSortCreator<T>.FilterSortCreator: Private accessors cannot be crea" +
					"ted for generic types");
		}

		/// <summary>
		///A test for GenericFilter (T)
		///</summary>
		[TestMethod()]
		public void GenericFilterTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.FilterSortCreator<T>.GenericFilter: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.FilterSortCreator<T>.GenericFilter: Private accessors cannot be created " +
					"for generic types");
		}

		/// <summary>
		///A test for IsVisible (T)
		///</summary>
		[TestMethod()]
		public void IsVisibleTest()
		{
			// Unit Test Generation Error: A private accessor could not be created for Vevy.Collections.FilterSortCreator<T>.IsVisible: Private accessors cannot be created for generic types
			Assert.Fail("Unit Test Generation Error: A private accessor could not be created for Vevy.Coll" +
					"ections.FilterSortCreator<T>.IsVisible: Private accessors cannot be created for " +
					"generic types");
		}

	}


}
